// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSdkLibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents the current state within the Tic Tac Toe game board for the
    /// Azure AI to calculate a next more for.
    /// </summary>
    public partial class CalculateMoveRequest
    {
        /// <summary>
        /// Initializes a new instance of the CalculateMoveRequest class.
        /// </summary>
        public CalculateMoveRequest() { }

        /// <summary>
        /// Initializes a new instance of the CalculateMoveRequest class.
        /// </summary>
        public CalculateMoveRequest(string playerSymbol, IList<string> gameBoard)
        {
            PlayerSymbol = playerSymbol;
            GameBoard = gameBoard;
        }

        /// <summary>
        /// The symbol of the player to calculate a move for.
        /// </summary>
        [JsonProperty(PropertyName = "playerSymbol")]
        public string PlayerSymbol { get; set; }

        /// <summary>
        /// An array of X, O, and ? symbols representing the current state of
        /// the game board where ? is an open space and the other symbols
        /// correspond to players.
        /// </summary>
        [JsonProperty(PropertyName = "gameBoard")]
        public IList<string> GameBoard { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (PlayerSymbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlayerSymbol");
            }
            if (GameBoard == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GameBoard");
            }
            if (this.PlayerSymbol != null)
            {
                if (this.PlayerSymbol.Length > 1)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PlayerSymbol", 1);
                }
                if (this.PlayerSymbol.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PlayerSymbol", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.PlayerSymbol, "X|O"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PlayerSymbol", "X|O");
                }
            }
            if (this.GameBoard != null)
            {
                if (this.GameBoard.Count > 9)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "GameBoard", 9);
                }
                if (this.GameBoard.Count < 9)
                {
                    throw new ValidationException(ValidationRules.MinItems, "GameBoard", 9);
                }
            }
        }
    }
}
