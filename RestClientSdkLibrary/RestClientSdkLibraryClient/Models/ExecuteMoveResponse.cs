// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSdkLibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ExecuteMoveResponse
    {
        /// <summary>
        /// Initializes a new instance of the ExecuteMoveResponse class.
        /// </summary>
        public ExecuteMoveResponse() { }

        /// <summary>
        /// Initializes a new instance of the ExecuteMoveResponse class.
        /// </summary>
        public ExecuteMoveResponse(string azurePlayerSymbol, string humanPlayerSymbol, IList<string> gameBoard, int? move = default(int?), string winner = default(string), IList<int?> winPositions = default(IList<int?>))
        {
            Move = move;
            AzurePlayerSymbol = azurePlayerSymbol;
            HumanPlayerSymbol = humanPlayerSymbol;
            GameBoard = gameBoard;
            Winner = winner;
            WinPositions = winPositions;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "move")]
        public int? Move { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azurePlayerSymbol")]
        public string AzurePlayerSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "humanPlayerSymbol")]
        public string HumanPlayerSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gameBoard")]
        public IList<string> GameBoard { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "winner")]
        public string Winner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "winPositions")]
        public IList<int?> WinPositions { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (AzurePlayerSymbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzurePlayerSymbol");
            }
            if (HumanPlayerSymbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HumanPlayerSymbol");
            }
            if (GameBoard == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GameBoard");
            }
            if (this.Move > 8)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Move", 8);
            }
            if (this.Move < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Move", 0);
            }
            if (this.AzurePlayerSymbol != null)
            {
                if (this.AzurePlayerSymbol.Length > 1)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AzurePlayerSymbol", 1);
                }
                if (this.AzurePlayerSymbol.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "AzurePlayerSymbol", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.AzurePlayerSymbol, "X|O"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AzurePlayerSymbol", "X|O");
                }
            }
            if (this.HumanPlayerSymbol != null)
            {
                if (this.HumanPlayerSymbol.Length > 1)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "HumanPlayerSymbol", 1);
                }
                if (this.HumanPlayerSymbol.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "HumanPlayerSymbol", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.HumanPlayerSymbol, "X|O"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "HumanPlayerSymbol", "X|O");
                }
            }
            if (this.GameBoard != null)
            {
                if (this.GameBoard.Count > 9)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "GameBoard", 9);
                }
                if (this.GameBoard.Count < 9)
                {
                    throw new ValidationException(ValidationRules.MinItems, "GameBoard", 9);
                }
            }
            if (this.Winner != null)
            {
                if (this.Winner.Length > 1)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Winner", 1);
                }
                if (this.Winner.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Winner", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Winner, "X|O"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Winner", "X|O");
                }
            }
            if (this.WinPositions != null)
            {
                if (this.WinPositions.Count > 3)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "WinPositions", 3);
                }
                if (this.WinPositions.Count < 3)
                {
                    throw new ValidationException(ValidationRules.MinItems, "WinPositions", 3);
                }
            }
        }
    }
}
